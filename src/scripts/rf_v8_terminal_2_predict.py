# C√≥digo completo para `rf_v8_terminal_predict.py` que permite hacer 
# predicciones interactivas desde la terminal:

# -*- coding: utf-8 -*-
import pickle
import numpy as np
import pandas as pd
from pathlib import Path
import json

# Configuraci√≥n de paths
model_dir = Path("models/")

def load_model_and_features():
    """Carga el modelo entrenado y los metadatos"""
    model_path = model_dir / "minimal_rf_model.pkl"
    
    try:
        with open(model_path, 'rb') as f:
            model_data = pickle.load(f)
        
        # Verificar que tenemos todos los componentes necesarios
        required_keys = {'model', 'feature_names', 'feature_dtypes'}
        if not all(key in model_data for key in required_keys):
            raise ValueError("El archivo del modelo no contiene toda la informaci√≥n requerida")
        
        return model_data
    except Exception as e:
        print(f"Error cargando el modelo: {e}")
        return None

def get_feature_input(feature_name, feature_type):
    """Obtiene entrada del usuario para una caracter√≠stica espec√≠fica"""
    while True:
        try:
            user_input = input(f"Ingrese el valor para '{feature_name}' ({feature_type}): ")
            
            # Convertir al tipo de dato correcto
            if 'int' in feature_type:
                return int(user_input)
            elif 'float' in feature_type:
                return float(user_input)
            else:
                return str(user_input)
        except ValueError:
            print(f"Error: Por favor ingrese un valor v√°lido para {feature_type}")
            continue

def make_prediction(model, features):
    """Realiza una predicci√≥n con el modelo"""
    try:
        # Convertir a DataFrame manteniendo el orden de las columnas
        input_df = pd.DataFrame([features], columns=features.keys())
        
        # Hacer la predicci√≥n (el modelo fue entrenado con log(price))
        log_prediction = model.predict(input_df)[0]
        
        # Convertir de vuelta a precio original
        prediction = np.expm1(log_prediction)
        return prediction
    except Exception as e:
        print(f"Error haciendo la predicci√≥n: {e}")
        return None

def main():
    print("\nüîÆ Predictor de Precios - Modelo Random Forest v8\n")
    
    # Cargar modelo y metadatos
    model_data = load_model_and_features()
    if not model_data:
        return
    
    model = model_data['model']
    feature_names = model_data['feature_names']
    feature_dtypes = model_data['feature_dtypes']
    
    print(f"\nEl modelo espera {len(feature_names)} caracter√≠sticas:")
    print(", ".join(feature_names))
    
    # Recopilar valores para cada caracter√≠stica
    features = {}
    print("\nPor favor ingrese los valores para cada caracter√≠stica:\n")
    
    for feature in feature_names:
        dtype = feature_dtypes.get(feature, 'str')  # Default a string si no se encuentra
        features[feature] = get_feature_input(feature, dtype)
    
    # Hacer la predicci√≥n
    prediction = make_prediction(model, features)
    
    if prediction is not None:
        print(f"\nüéØ Precio estimado: ‚Ç¨{prediction:,.2f}")
    
    print("\n‚úÖ Predicci√≥n completada\n")

if __name__ == "__main__":
    main()


### Caracter√≠sticas clave del script:

""" 1. **Carga inteligente del modelo**:
   - Verifica que el archivo del modelo contenga toda la informaci√≥n necesaria
   - Carga nombres de caracter√≠sticas y sus tipos de datos

2. **Interfaz interactiva**:
   - Solicita valores para cada caracter√≠stica una por una
   - Valida los tipos de datos ingresados por el usuario
   - Proporciona gu√≠as claras sobre qu√© se espera para cada entrada

3. **Conversi√≥n de datos**:
   - Convierte autom√°ticamente las entradas a los tipos correctos
   - Maneja la transformaci√≥n logar√≠tmica/inversa para el precio

4. **Mensajes informativos**:
   - Muestra la lista de caracter√≠sticas esperadas
   - Proporciona feedback claro durante el proceso
   - Formatea el resultado final de manera legible

### C√≥mo usar el script:

1. Ejec√∫talo desde la terminal: `python rf_v8_terminal_predict.py`
2. Sigue las instrucciones para ingresar los valores de cada caracter√≠stica
3. Obtendr√°s una predicci√≥n de precio formateada al final

### Requisitos previos:

- Aseg√∫rate que el archivo `minimal_rf_model.pkl` exista en el directorio `../models/`
- El script debe mantenerse en la misma estructura de directorios que tu c√≥digo de entrenamiento

Este script est√° dise√±ado para funcionar perfectamente con los modelos entrenados por el c√≥digo de entrenamiento
del Model Training Random Forest v8. """